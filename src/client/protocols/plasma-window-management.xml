<?xml version="1.0" encoding="UTF-8"?>
<protocol name="plasma_window_management">
  <copyright><![CDATA[
    Copyright (C) 2013-2014 Pier Luigi Fiorini

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 2.1 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ]]></copyright>

  <interface name="org_kde_plasma_window_management" version="2">
    <description summary="application windows management">
      This interface manages application windows.
      It provides requests to show and hide the desktop and emits
      an event every time a window is created so that the client can
      use it to manage the window.

      Only one client can bind this interface at a time.
    </description>

    <enum name="state">
      <entry name="active" value="1 &lt;&lt; 0"/>
      <entry name="minimized" value="1 &lt;&lt; 1"/>
      <entry name="maximized" value="1 &lt;&lt; 2"/>
      <entry name="fullscreen" value="1 &lt;&lt; 3"/>
      <entry name="keep_above" value="1 &lt;&lt; 4"/>
      <entry name="keep_below" value="1 &lt;&lt; 5"/>
      <entry name="on_all_desktops" value="1 &lt;&lt; 6"/>
      <entry name="demands_attention" value="1 &lt;&lt; 7"/>
      <entry name="closeable" value="1 &lt;&lt; 8"/>
      <entry name="minimizable" value="1 &lt;&lt; 9"/>
      <entry name="maximizable" value="1 &lt;&lt; 10"/>
      <entry name="fullscreenable" value="1 &lt;&lt; 11"/>
      <entry name="skiptaskbar" value="1 &lt;&lt; 12" since="2"/>
    </enum>

    <enum name="show_desktop">
        <entry name="disabled" value="0"/>
        <entry name="enabled" value="1"/>
    </enum>

    <request name="show_desktop">
      <description summary="show/hide the desktop">
        Tell the compositor to show/hide the desktop.
      </description>
      <arg name="state" type="uint" summary="requested state"/>
    </request>

    <request name="get_window">
        <arg name="id" type="new_id" interface="org_kde_plasma_window"/>
        <arg name="internal_window_id" type="uint" summary="The internal window id of the window to create"/>
    </request>

    <event name="show_desktop_changed">
        <description summary="notify the client when the show desktop mode is entered/left">
            This event will be sent whenever the show desktop mode changes. E.g. when it is entered
            or left.

            On binding the interface the current state is sent.
        </description>
      <arg name="state" type="uint" summary="new state"/>
    </event>

    <event name="window">
      <description summary="notify the client that a window was mapped">
        This event will be sent immediately after a window is mapped.
      </description>
      <arg name="id" type="uint" summary="internal window Id"/>
    </event>
  </interface>

  <interface name="org_kde_plasma_window" version="1">
    <description summary="interface to control application windows">
      Manages and control an application window.

      Only one client can bind this interface at a time.
    </description>

    <request name="set_state">
      <description summary="set window state">
        Set window state.

        Values for state argument are described by org_kde_plasma_window_management.state
        and can be used together in a bitfield. The flags bitfield describes which flags are
        supposed to be set, the state bitfield the value for the set flags
      </description>
      <arg name="flags" type="uint" summary="bitfield of set state flags"/>
      <arg name="state" type="uint" summary="bitfield of state flags"/>
    </request>

    <request name="set_virtual_desktop">
      <description summary="map window on a virtual desktop">
        Maps the window to a different virtual desktop.

        To show the window on all virtual desktops, call the
        org_kde_plasma_window.set_state request and specify a on_all_desktops
        state in the bitfield.
      </description>
      <arg name="number" type="uint" summary="zero based virtual desktop number"/>
    </request>

  <!--
    <request name="highlight">
      <description summary="highlight the window">
        Tell the compositor to highlight this window.
      </description>
    </request>
  -->

    <request name="close">
      <description summary="close window">
        Close this window.
      </description>
    </request>

    <event name="title_changed">
      <description summary="window title has been changed">
        This event will be sent as soon as the window title is changed.
      </description>
      <arg name="title" type="string" summary="window title"/>
    </event>

    <event name="app_id_changed">
      <description summary="application identifier has been changed">
        This event will be sent as soon as the application
        identifier is changed.
      </description>
      <arg name="app_id" type="string"/>
    </event>

    <event name="state_changed">
      <description summary="window state has been changed">
        This event will be sent as soon as the window state changes.

        Values for state argument are described by org_kde_plasma_window_management.state.
      </description>
      <arg name="flags" type="uint" summary="bitfield of state flags"/>
    </event>

    <event name="virtual_desktop_changed">
      <description summary="window was moved to another workspace">
        This event will be sent when a window is moved to another
        virtual desktop.

        It is not sent if it becomes visible on all virtual desktops though.
      </description>
      <arg name="number" type="int" summary="zero based virtual desktop number"/>
    </event>

    <event name="themed_icon_name_changed">
        <description summary="window's icon name changed">
            This event will be sent whenever the themed icon name changes. May be null.
        </description>
        <arg name="name" type="string" summary="the new themed icon name"/>
    </event>

    <event name="unmapped">
      <description summary="window's surface was unmapped">
        This event will be sent immediately after the window is closed
        and its surface is unmapped.
      </description>
    </event>
  </interface>
</protocol>

<?xml version="1.0" encoding="UTF-8"?>
<protocol name="plasma_shell">
  <copyright><![CDATA[
    Copyright (C) 2013-2014 Pier Luigi Fiorini

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 2.1 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ]]></copyright>

  <interface name="org_kde_plasma_shell" version="1">
    <description summary="create shell windows and helpers">
      This interface is used by KF5 powered Wayland shells to communicate with
      the compositor and can only be bound one time.
    </description>

    <!-- Surfaces -->

    <request name="get_surface">
      <description summary="create a shell surface from a surface">
	Create a shell surface for an existing surface.

	Only one shell surface can be associated with a given
	surface.
      </description>
      <arg name="id" type="new_id" interface="org_kde_plasma_surface"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <!-- Lock and unlock -->

    <!--
    <request name="lock">
      <description summary="lock the session">
        Tell the compositor to initiate the lock sequence.

        When the compositor receives this request it hides all surfaces,
        disable all input for them and go in idle mode (usually it turns off
        the screens or run the screen saver).

        Input events resume the compositor (it turns the screens on or
        kills the screen saver), however surfaces keep being hidden.

        At this point the org_kde_plasma_shell.prepare_lock_surfaces event is emitted
        and the shell decides what to do.
      </description>
    </request>

    <request name="unlock">
      <description summary="unlock the session">
        Tell the compositor to unlock the session.

        This resumes the compositor and restores all surfaces to
        their initial state.

        The shell at this point can destroy lock surfaces to save
        resources.
      </description>
    </request>

    <event name="prepare_lock_surfaces">
      <description summary="tell the shell to create lock surfaces">
	Tell the shell we want it to create lock surfaces and set their role.
        See org_kde_plasma_shell.set_lock_role for more details.

	Whether or not the shell actually implements locking, it MUST send the
        org_kde_plasma_shell.unlock request to let the normal desktop resume.
      </description>
    </event>
    -->

    <!-- Desktop loading -->

<!--
    <event name="loaded">
      <description summary="tell the shell to create and set its surfaces">
        Tell the shell we want it to create and set its surfaces such as
        desktops and panels.

        The shell will then call org_kde_plasma_shell.desktop_ready when all
        surfaces are ready.
      </description>
    </event>

    <request name="desktop_ready">
      <description summary="desktop is ready to be shown">
	Tell the compositor, that enough desktop elements have been drawn
	to make the desktop look ready for use.

        During start-up, the compositor can wait for this request with a
        black screen and fade the desktop in when this request is called.

        If the shell surfaces take a long time to initialize, we avoid
	showing temporary garbage.

        See also the splash role in org_kde_plasma_surface.set_role.
      </description>
    </request>
-->

    <!-- Other stuff -->

<!--
    <request name="present">
      <description summary="present all surfaces specified">
        Tell the compositor to present all the specified surfaces.
      </description>
      <arg name="surfaces" type="array" allow-null="true" summary="list of surfaces to present"/>
    </request>
-->

    <!-- Martin will discuss the whole security concept at XDC -->
    <!--
    <request name="add_trusted_client">
      <description summary="add a trusted client">
        Adds a client to the whitelist for the specified interface.
      </description>
      <arg name="fd" type="fd"/>
      <arg name="interface" type="string"/>
    </request>
    -->
  </interface>

  <interface name="org_kde_plasma_surface" version="1">
    <description summary="metadata interface">
      An interface that may be implemented by a wl_surface, for
      implementations that provide the shell user interface.

      It provides requests to set surface roles, assign an output
      or set the position in output coordinates.

      On the server side the object is automatically destroyed when
      the related wl_surface is destroyed.  On client side,
      org_kde_plasma_surface.destroy() must be called before
      destroying the wl_surface object.
    </description>

    <!-- Destructor -->

    <request name="destroy" type="destructor">
      <description summary="remove org_kde_plasma_surface interface">
        The org_kde_plasma_surface interface is removed from the
        wl_surface object that was turned into a shell surface with the
        org_kde_plasma_shell.get_surface request.
        The shell surface role is lost and wl_surface is unmapped.
      </description>
    </request>

    <!-- Output and position -->

    <request name="set_output">
      <description summary="assign an output to this shell surface">
        Assign an output to this shell surface.
        The compositor will use this information to set the position
        when org_kde_plasma_surface.set_position request is
        called.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
    </request>

    <request name="set_position">
      <description summary="change the shell surface position">
        Move the surface to new coordinates.

        Coordinates are global, for example 50,50 for a 1920,0+1920x1080 output
        is 1970,50 in global coordinates space.

        Use org_kde_plasma_surface.set_output to assign an output
        to this surface.
      </description>
      <arg name="x" type="int" summary="x coordinate in global space"/>
      <arg name="y" type="int" summary="y coordinate in global space"/>
    </request>

    <!-- Role -->

    <enum name="role">
      <entry name="normal" value="0"/>
      <entry name="desktop" value="1"/>
      <entry name="panel" value="2"/>
<!--
      <entry name="splash" value="1"/>
      <entry name="dashboard" value="3"/>
      <entry name="overlay" value="5"/>
      <entry name="notification" value="6"/>
      <entry name="lock" value="7"/>
-->
    </enum>

    <request name="set_role">
      <description summary="assign a role to this surface">
        Assign a role to a shell surface.

        The compositor handles surfaces depending on their role.
        See the explaination below.

        This request fails if the surface already has a role, this means
        the surface role may be assigned only once.

        == Surfaces with splash role ==

        Splash surfaces are placed above every other surface during the
        shell startup phase.

        The surfaces are placed according to the output coordinates.
        No size is imposed to those surfaces, the shell has to resize
        them according to output size.

        These surfaces are meant to hide the desktop during the startup
        phase so that the user will always see a ready to work desktop.

        A shell might not create splash surfaces if the compositor reveals
        the desktop in an alternative fashion, for example with a fade
        in effect.

        That depends on how much time the desktop usually need to prepare
        the workspace or specific design decisions.
        This specification doesn't impose any particular design.

        When the startup phase is finished, the shell will send the
        org_kde_plasma.desktop_ready request to the compositor.

        == Surfaces with desktop role ==

        Desktop surfaces are placed below all other surfaces and are used
        to show the actual desktop view with icons, search results or
        controls the user will interact with. What to show depends on the
        shell implementation.

        The surfaces are placed according to the output coordinates.
        No size is imposed to those surfaces, the shell has to resize
        them according to output size.

        Only one surface per output can have the desktop role.

        == Surfaces with dashboard role ==

        Dashboard surfaces are placed above desktop surfaces and are used to
        show additional widgets and controls.

        The surfaces are placed according to the output coordinates.
        No size is imposed to those surfaces, the shell has to resize
        them according to output size.

        Only one surface per output can have the dashboard role.

        == Surfaces with config role ==

        A configuration surface is shown when the user wants to configure
        panel or desktop views.

        Only one surface per output can have the config role.

        TODO: This should grab the input like popup menus, right?

        == Surfaces with overlay role ==

        Overlays are special surfaces that shows for a limited amount
        of time.  Such surfaces are useful to display things like volume,
        brightness and status changes.

        Compositors may decide to show those surfaces in a layer above
        all surfaces, even full screen ones if so is desired.

        == Surfaces with notification role ==

        Notification surfaces display informative content for a limited
        amount of time.  The compositor may decide to show them in a corner
        depending on the configuration.

        These surfaces are shown in a layer above all other surfaces except
        for full screen ones.

        == Surfaces with lock role ==

        The lock surface is shown by the compositor when the session is
        locked, users interact with it to unlock the session.

        Compositors should move lock surfaces to 0,0 in output
        coordinates space and hide all other surfaces for security sake.
        For the same reason it is recommended that clients make the
        lock surface as big as the screen.

        Only one surface per output can have the lock role.
      </description>
      <arg name="role" type="uint"/>
    </request>

    <!-- Flags -->

    <enum name="panel_behavior">
      <description summary="Behavior for panel surface">
      </description>
      <entry name="always_visible" value="1" summary="normal panel visibility">
        The panel is on top of other surfaces, windows cannot cover (full screen
        windows excluded).
      </entry>
      <entry name="auto_hide" value="2" summary="hide automatically">
        The panel is hidden automatically and restored when the mouse is over.
      </entry>
      <entry name="windows_can_cover" value="3" summary="windows can cover">
        Windows can cover the panel.
      </entry>
      <entry name="windows_go_below" value="4" summary="windows go below">
        Maximized windows take the whole screen space but the panel is above
        the windows.
      </entry>
    </enum>

    <request name="set_panel_behavior">
      <description summary="set or unset the panel ">
        Set flags bitmask as described by the flag enum.
        Pass 0 to unset any flag, the surface will adjust its behavior to
        the default.
      </description>
      <arg name="flag" type="uint" summary="panel_behavior enum value"/>
    </request>

    <!-- Screen edge -->
    <!-- Will replace https://community.kde.org/KWin/Screen_Edges -->

<!--
    <enum name="screen_edge">
      <entry name="none" value="0"/>
      <entry name="left" value="1"/>
      <entry name="top" value="2"/>
      <entry name="right" value="3"/>
      <entry name="bottom" value="4"/>
    </enum>

    <request name="set_screen_edge">
      <description summary="set screen edge activation">
      </description>
      <arg name="screen_edge" type="uint"/>
    </request>
-->
  </interface>
</protocol>

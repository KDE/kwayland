<?xml version="1.0" encoding="UTF-8"?>
<protocol name="org_kde_kwin_outputdevice">
  <copyright><![CDATA[
        Copyright © 2015 Sebastian Kügler <sebas@kde.org>
        Copyright © 2008-2011 Kristian Høgsberg
        Copyright © 2010-2011 Intel Corporation
        Copyright © 2012-2013 Collabora, Ltd.

        Permission to use, copy, modify, distribute, and sell this
        software and its documentation for any purpose is hereby granted
        without fee, provided that the above copyright notice appear in
        all copies and that both that copyright notice and this permission
        notice appear in supporting documentation, and that the name of
        the copyright holders not be used in advertising or publicity
        pertaining to distribution of the software without specific,
        written prior permission.  The copyright holders make no
        representations about the suitability of this software for any
        purpose.  It is provided "as is" without express or implied
        warranty.

        THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
        SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
        FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
        SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
        WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
        AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
        ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
        THIS SOFTWARE.
        ]]></copyright>


<interface name="org_kde_kwin_outputdevice" version="2">
    <description summary="compositor output region">
        An output describes part of the compositor geometry.  The
        compositor works in the 'compositor coordinate system' and an
        output corresponds to rectangular area in that space that is
        actually visible.  This typically corresponds to a monitor that
        displays part of the compositor space.  This object is published
        as global during start up, or when a monitor is hotplugged.
    </description>

    <enum name="subpixel">
        <description summary="subpixel geometry information">
            This enumeration describes how the physical
            pixels on an output are laid out.
        </description>
        <entry name="unknown" value="0"/>
        <entry name="none" value="1"/>
        <entry name="horizontal_rgb" value="2"/>
        <entry name="horizontal_bgr" value="3"/>
        <entry name="vertical_rgb" value="4"/>
        <entry name="vertical_bgr" value="5"/>
    </enum>

    <enum name="transform">
        <description summary="transform from framebuffer to output">
            This describes the transform that a compositor will apply to a
            surface to compensate for the rotation or mirroring of an
            output device.

            The flipped values correspond to an initial flip around a
            vertical axis followed by rotation.

            The purpose is mainly to allow clients render accordingly and
            tell the compositor, so that for fullscreen surfaces, the
            compositor will still be able to scan out directly from client
            surfaces.
        </description>

        <entry name="normal" value="0"/>
        <entry name="90" value="1"/>
        <entry name="180" value="2"/>
        <entry name="270" value="3"/>
        <entry name="flipped" value="4"/>
        <entry name="flipped_90" value="5"/>
        <entry name="flipped_180" value="6"/>
        <entry name="flipped_270" value="7"/>
    </enum>

    <event name="geometry">
        <description summary="properties of the output">
            The geometry event describes geometric properties of the output.
            The event is sent when binding to the output object and whenever
            any of the properties change.
        </description>
        <arg name="x" type="int"
             summary="x position within the global compositor space"/>
        <arg name="y" type="int"
             summary="y position within the global compositor space"/>
        <arg name="physical_width" type="int"
             summary="width in millimeters of the output"/>
        <arg name="physical_height" type="int"
             summary="height in millimeters of the output"/>
        <arg name="subpixel" type="int"
             summary="subpixel orientation of the output"/>
        <arg name="make" type="string"
             summary="textual description of the manufacturer"/>
        <arg name="model" type="string"
             summary="textual description of the model"/>
        <arg name="transform" type="int"
             summary="transform that maps framebuffer to output"/>
    </event>

    <enum name="mode">
        <description summary="mode information">
            These flags describe properties of an output mode.
            They are used in the flags bitfield of the mode event.
        </description>
        <entry name="current" value="0x1"
                summary="indicates this is the current mode"/>
        <entry name="preferred" value="0x2"
                summary="indicates this is the preferred mode"/>
    </enum>

    <event name="mode">
        <description summary="advertise available modes for the output">
            The mode event describes an available mode for the output.

            The event is sent when binding to the output object and there
            will always be one mode, the current mode.  The event is sent
            again if an output changes mode, for the mode that is now
            current.  In other words, the current mode is always the last
            mode that was received with the current flag set.

            The size of a mode is given in physical hardware units of
            the output device. This is not necessarily the same as
            the output size in the global compositor space. For instance,
            the output may be scaled, as described in org_kde_kwin_outputdevice.scale,
            or transformed , as described in org_kde_kwin_outputdevice.transform.
        </description>
        <arg name="flags" type="uint" summary="bitfield of mode flags"/>
        <arg name="width" type="int" summary="width of the mode in hardware units"/>
        <arg name="height" type="int" summary="height of the mode in hardware units"/>
        <arg name="refresh" type="int" summary="vertical refresh rate in mHz"/>
    </event>

    <event name="done" since="2">
        <description summary="sent all information about output">
            This event is sent after all other properties has been
            sent after binding to the output object and after any
            other property changes done after that. This allows
            changes to the output properties to be seen as
            atomic, even if they happen via multiple events.
        </description>
    </event>

    <event name="scale" since="2">
        <description summary="output scaling properties">
            This event contains scaling geometry information
            that is not in the geometry event. It may be sent after
            binding the output object or if the output scale changes
            later. If it is not sent, the client should assume a
            scale of 1.

            A scale larger than 1 means that the compositor will
            automatically scale surface buffers by this amount
            when rendering. This is used for very high resolution
            displays where applications rendering at the native
            resolution would be too small to be legible.

            It is intended that scaling aware clients track the
            current output of a surface, and if it is on a scaled
            output it should use wl_surface.set_buffer_scale with
            the scale of the output. That way the compositor can
            avoid scaling the surface, and the client can supply
            a higher detail image.
        </description>
        <arg name="factor" type="int" summary="scaling factor of output"/>
    </event>

    <event name="edid">
        <description summary="advertise available modes for the output">
            The mode event encapsulates the EDID data for the output.

            The event is sent when binding to the output object. The EDID
            data may be empty, in which case this event is fired, anyway.
            If the EDID information is empty, you can fall back to the name
            et al. properties.

            The data argument can be used to decode custom EDID extensions.
        </description>
        <arg name="eisaId" type="string" summary="EISA identification number"/>
        <arg name="monitorName" type="string" summary="unique human-readable monitor name"/>
        <arg name="serialNumber" type="string" summary="serial number of the output"/>
        <arg name="physicalWidth" type="int" summary="physical width of the monitor in mm"/>
        <arg name="physicalHeight" type="int" summary="physical height of the monitor in mm"/>
        <arg name="raw" type="string" summary="raw EDID string"/>
    </event>

    <event name="enabled">
        <description summary="advertise available modes for the output">
            The enabled event notifies whether this output is currently
            enabled and used for the wayland server.

            The event is sent when binding to the output object, and when
            an output is enabled or disabled.
        </description>
        <arg name="enabled" type="int" summary="output is enabled in the wayland server"/>
    </event>


</interface>



</protocol>
